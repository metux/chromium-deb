description: scale factor calculation support for gtk2
origin: implementation from chromium 59.0.3071.86

--- a/chrome/browser/ui/libgtkui/gtk_ui.cc
+++ b/chrome/browser/ui/libgtkui/gtk_ui.cc
@@ -1048,12 +1048,54 @@ void GtkUi::ResetStyle() {
   native_theme_->NotifyObservers();
 }
 
+float GtkDpiToScaleFactor(int dpi) {
+  // GTK multiplies the DPI by 1024 before storing it.
+  return dpi / (1024 * kDefaultDPI);
+}
+
+gint GetGdkScreenSettingInt(const char* setting_name) {
+  GValue value = G_VALUE_INIT;
+  g_value_init(&value, G_TYPE_INT);
+  if (!gdk_screen_get_setting(gdk_screen_get_default(), setting_name, &value))
+    return -1;
+  return g_value_get_int(&value);
+}
+
+float GetScaleFromGdkScreenSettings() {
+  gint window_scale = GetGdkScreenSettingInt("gdk-window-scaling-factor");
+  if (window_scale <= 0)
+    return -1;
+  gint font_dpi = GetGdkScreenSettingInt("gdk-unscaled-dpi");
+  if (font_dpi <= 0)
+    return -1;
+  return window_scale * GtkDpiToScaleFactor(font_dpi);
+}
+
+float GetScaleFromXftDPI() {
+  GtkSettings* gtk_settings = gtk_settings_get_default();
+  CHECK(gtk_settings);
+  gint gtk_dpi = -1;
+  g_object_get(gtk_settings, "gtk-xft-dpi", &gtk_dpi, nullptr);
+  if (gtk_dpi <= 0)
+    return -1;
+  return GtkDpiToScaleFactor(gtk_dpi);
+}
+
 float GtkUi::GetRawDeviceScaleFactor() {
   if (display::Display::HasForceDeviceScaleFactor())
     return display::Display::GetForcedDeviceScaleFactor();
 
   GdkScreen* screen = gdk_screen_get_default();
+#if GTK_MAJOR_VERSION == 2
+  float scale = GetScaleFromGdkScreenSettings();
+  if (scale <= 0) {
+    scale = GetScaleFromXftDPI();
+    if (scale <= 0)
+      scale = 1;
+  }
+#else
   gint scale = gtk_widget_get_scale_factor(fake_window_);
+#endif
   gdouble resolution = gdk_screen_get_resolution(screen);
   const float scale_factor =
       resolution <= 0 ? scale : resolution * scale / kDefaultDPI;
